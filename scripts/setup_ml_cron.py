#!/usr/bin/env python3
"""
Setup script for ML training cron jobs
Helps configure and install the daily ML training cron job
"""

import os
import sys
import subprocess
from pathlib import Path

def get_project_root():
    """Get the absolute path to the project root"""
    return Path(__file__).parent.parent.absolute()

def create_cron_entry():
    """Create the cron entry with correct paths"""
    project_root = get_project_root()
    python_path = sys.executable
    
    # Create the cron entry
    cron_entry = f"0 2 * * * cd {project_root} && {python_path} scripts/schedule_ml_training.py >> logs/ml_training_cron.log 2>&1"
    
    return cron_entry

def install_cron_job():
    """Install the ML training cron job"""
    try:
        # Get current crontab
        try:
            current_cron = subprocess.check_output(['crontab', '-l'], stderr=subprocess.DEVNULL).decode('utf-8')
        except subprocess.CalledProcessError:
            # No existing crontab
            current_cron = ""
        
        cron_entry = create_cron_entry()
        
        # Check if our cron job already exists
        if 'schedule_ml_training.py' in current_cron:
            print("ML training cron job already exists!")
            print("Current entry found in crontab.")
            return True
        
        # Add our cron job
        new_cron = current_cron.rstrip() + '\n' if current_cron else ''
        new_cron += f"\n# ML Training - Auto-generated by setup_ml_cron.py\n"
        new_cron += cron_entry + '\n'
        
        # Install new crontab
        process = subprocess.Popen(['crontab', '-'], stdin=subprocess.PIPE, text=True)
        process.communicate(input=new_cron)
        
        if process.returncode == 0:
            print("✓ ML training cron job installed successfully!")
            print(f"  Schedule: Daily at 2:00 AM")
            print(f"  Command: {cron_entry}")
            print(f"  Logs: {get_project_root()}/logs/ml_training_cron.log")
            return True
        else:
            print("✗ Failed to install cron job")
            return False
            
    except FileNotFoundError:
        print("✗ Crontab command not found. Cron may not be available on this system.")
        print("  For Windows, consider using Task Scheduler instead.")
        return False
    except Exception as e:
        print(f"✗ Error installing cron job: {e}")
        return False

def create_windows_task():
    """Create a Windows Task Scheduler equivalent"""
    project_root = get_project_root()
    python_path = sys.executable
    
    # Create a batch file for Windows
    batch_content = f"""@echo off
cd /d "{project_root}"
"{python_path}" scripts\\schedule_ml_training.py >> logs\\ml_training_cron.log 2>&1
"""
    
    batch_file = project_root / 'scripts' / 'ml_training.bat'
    with open(batch_file, 'w') as f:
        f.write(batch_content)
    
    print(f"✓ Created Windows batch file: {batch_file}")
    print("\nTo schedule this in Windows:")
    print("1. Open Task Scheduler")
    print("2. Create Basic Task")
    print("3. Set trigger to Daily at 2:00 AM")
    print(f"4. Set action to start program: {batch_file}")
    
    return True

def show_manual_setup():
    """Show manual setup instructions"""
    cron_entry = create_cron_entry()
    
    print("\nManual Setup Instructions:")
    print("=" * 50)
    print("\n1. Linux/macOS Cron Job:")
    print("   Run: crontab -e")
    print("   Add this line:")
    print(f"   {cron_entry}")
    print("\n2. Or use the provided config file:")
    print(f"   crontab {get_project_root()}/config/crontab.conf")
    print("\n3. Verify installation:")
    print("   crontab -l")

def main():
    """Main setup function"""
    print("ML Training Cron Job Setup")
    print("=" * 30)
    
    project_root = get_project_root()
    print(f"Project root: {project_root}")
    
    # Create logs directory
    logs_dir = project_root / 'logs'
    logs_dir.mkdir(exist_ok=True)
    print(f"✓ Logs directory ready: {logs_dir}")
    
    # Make scripts executable
    schedule_script = project_root / 'scripts' / 'schedule_ml_training.py'
    if schedule_script.exists():
        os.chmod(schedule_script, 0o755)
        print(f"✓ Made script executable: {schedule_script}")
    
    # Detect platform and install accordingly
    if os.name == 'nt':  # Windows
        print("\nDetected Windows system")
        create_windows_task()
    else:  # Linux/macOS
        print("\nDetected Unix-like system")
        success = install_cron_job()
        if not success:
            show_manual_setup()
    
    print("\nSetup completed!")
    print("\nTo test the ML training manually:")
    print(f"  python {project_root}/scripts/schedule_ml_training.py")
    print("\nTo check cron logs:")
    print(f"  tail -f {project_root}/logs/ml_training_cron.log")

if __name__ == "__main__":
    main()